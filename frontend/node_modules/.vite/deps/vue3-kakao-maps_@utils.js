import {
  Fragment,
  computed,
  createBlock,
  createCommentVNode,
  createElementBlock,
  defineComponent,
  inject,
  normalizeStyle,
  onBeforeUnmount,
  onMounted,
  openBlock,
  provide,
  ref,
  renderList,
  renderSlot,
  toRaw,
  unref,
  watch,
  withCtx
} from "./chunk-KZPH43E5.js";
import "./chunk-HKJ2B2AA.js";

// node_modules/vue3-kakao-maps/dist/index.js
var m = ref(false);
var Q = (p, M) => {
  const i = document.createElement("script"), e = M != null && M.length > 0 ? `&libraries=${M.join(",")}` : "";
  i.id = "kakao-map-api-script", i.src = `//dapi.kakao.com/v2/maps/sdk.js?appkey=${p}&autoload=false${e}`, document.body.appendChild(i), i.onload = () => {
    kakao.maps.load(() => {
      m.value = true;
    });
  };
};
var T = defineComponent({
  __name: "KakaoMap",
  props: {
    width: { default: "40rem" },
    height: { default: "30rem" },
    markerList: {},
    infoWindowList: {},
    markerCluster: {},
    lat: {},
    lng: {},
    level: { default: 3 },
    mapTypeId: {},
    draggable: { type: Boolean, default: true },
    scrollwheel: { type: Boolean, default: true },
    disableDoubleClick: { type: Boolean, default: false },
    disableDoubleClickZoom: { type: Boolean, default: false },
    projectionId: { default: "kakao.maps.ProjectionId.WCONG" },
    tileAnimation: { type: Boolean, default: true },
    keyboardShortcuts: { type: [Boolean, Object] }
  },
  emits: ["onLoadKakaoMap", "onLoadKakaoMapMarkerCluster"],
  setup(p, { emit: M }) {
    const i = p, e = M, a = ref(null), u = ref();
    provide("mapRef", u);
    const d = () => {
      const n = {
        center: new kakao.maps.LatLng(i.lat, i.lng),
        ...i
      };
      a.value !== null && (u.value = new window.kakao.maps.Map(a.value, n), e("onLoadKakaoMap", u.value));
    }, y = ref(), t = (n) => {
      var k, l;
      if (n.markers === void 0 && n.customOverlayProps === void 0)
        throw new Error("클러스터 할 입력값이 없습니다.");
      if (u.value !== null) {
        if (n.markers !== void 0) {
          const o = ref([]);
          (k = n.markers) == null || k.forEach((s) => {
            var K;
            const g = new kakao.maps.Marker({
              position: new kakao.maps.LatLng(s.lat, s.lng),
              image: s.image ?? void 0,
              title: s.title ?? void 0,
              draggable: typeof s.draggable == "boolean" ? s.draggable : false,
              clickable: typeof s.clickable == "boolean" ? s.clickable : false,
              zIndex: typeof s.zIndex == "number" ? s.zIndex : 0,
              opacity: s.opacity ?? 1,
              altitude: s.altitude ?? 0,
              range: s.range ?? void 0
            });
            (K = o.value) == null || K.push(g);
          }), y.value = new kakao.maps.MarkerClusterer({
            map: toRaw(u.value),
            ...n,
            markers: o.value
          });
        }
        if (n.customOverlayProps !== void 0) {
          const o = ref([]);
          (l = n.customOverlayProps) == null || l.forEach((s) => {
            var K;
            const g = new kakao.maps.CustomOverlay({
              position: new kakao.maps.LatLng(s.lat, s.lng),
              content: s.content,
              xAnchor: s.xAnchor,
              yAnchor: s.yAnchor,
              zIndex: s.zIndex,
              clickable: s.clickable
            });
            (K = o.value) == null || K.push(g);
          }), y.value = new kakao.maps.MarkerClusterer({
            map: toRaw(u.value),
            ...n,
            markers: o.value
          });
        }
        e("onLoadKakaoMapMarkerCluster", y.value);
      }
    };
    onMounted(() => {
      m.value && (d(), i.markerCluster !== void 0 && t(i.markerCluster));
    }), watch(
      () => m.value,
      (n) => {
        n && (d(), i.markerCluster !== void 0 && t(i.markerCluster));
      }
    );
    const r = computed(() => ({
      width: isFinite(+i.width) ? i.width + "px" : i.width,
      height: isFinite(+i.height) ? i.height + "px" : i.height
    }));
    return watch([() => i.lat, () => i.lng], ([n, k]) => {
      var l;
      (l = u.value) == null || l.panTo(new kakao.maps.LatLng(n, k));
    }), watch(
      () => i.draggable,
      (n) => {
        var k, l;
        n === void 0 || n ? (k = u.value) == null || k.setDraggable(true) : (l = u.value) == null || l.setDraggable(false);
      }
    ), watch(
      () => i.level,
      (n) => {
        var k, l;
        n === void 0 ? (k = u.value) == null || k.setLevel(3) : (l = u.value) == null || l.setLevel(n);
      }
    ), watch(
      () => i.mapTypeId,
      (n) => {
        var k, l;
        n === void 0 ? (k = u.value) == null || k.setMapTypeId(3) : (l = u.value) == null || l.setMapTypeId(n);
      }
    ), watch(
      () => i.scrollwheel,
      (n) => {
        var k, l;
        n === void 0 ? (k = u.value) == null || k.setZoomable(true) : (l = u.value) == null || l.setZoomable(n);
      }
    ), watch(
      () => i.projectionId,
      (n) => {
        var k, l;
        n === void 0 ? (k = u.value) == null || k.setProjectionId(kakao.maps.ProjectionId.WCONG) : (l = u.value) == null || l.setProjectionId(n);
      }
    ), watch(
      () => i.keyboardShortcuts,
      (n) => {
        var k, l;
        n === void 0 ? (k = u.value) == null || k.setKeyboardShortcuts(false) : typeof n == "boolean" && ((l = u.value) == null || l.setKeyboardShortcuts(n));
      }
    ), (n, k) => (openBlock(), createElementBlock("div", {
      ref_key: "kakaoMapRef",
      ref: a,
      style: normalizeStyle(r.value)
    }, [
      i.markerList && i.markerCluster === void 0 ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(i.markerList, (l, o) => (openBlock(), createBlock(unref(B), {
        key: l.key === void 0 ? o : l.key,
        lat: l.lat,
        lng: l.lng,
        "info-window": l == null ? void 0 : l.infoWindow,
        draggable: l.draggable,
        image: l.image,
        order: l.order,
        "order-bottom-margin": l.orderBottomMargin
      }, null, 8, ["lat", "lng", "info-window", "draggable", "image", "order", "order-bottom-margin"]))), 128)) : createCommentVNode("", true),
      i.infoWindowList && i.markerCluster === void 0 ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(i.infoWindowList, (l, o) => (openBlock(), createBlock(unref(x), {
        key: l.key === void 0 ? o : l.key,
        lat: l.lat,
        lng: l.lng,
        content: l.content,
        visible: l.visible
      }, null, 8, ["lat", "lng", "content", "visible"]))), 128)) : createCommentVNode("", true),
      renderSlot(n.$slots, "default")
    ], 4));
  }
});
var N = {
  imageSrc: "https://t1.daumcdn.net/mapjsapi/images/2x/marker.png",
  imageWidth: 29,
  imageHeight: 42,
  imageOption: {}
};
var B = defineComponent({
  __name: "KakaoMapMarker",
  props: {
    lat: {},
    lng: {},
    infoWindow: {},
    visible: { type: Boolean },
    image: {},
    title: {},
    draggable: { type: Boolean },
    clickable: { type: Boolean },
    zIndex: {},
    opacity: {},
    altitude: {},
    range: {},
    order: {},
    orderBottomMargin: {}
  },
  emits: [
    "onLoadKakaoMapMarker",
    "onClickKakaoMapMarker",
    "dragEndKakaoMapMarker",
    "mouseOverKakaoMapMarker",
    "mouseOutKakaoMapMarker",
    "deleteKakaoMapMarker"
  ],
  setup(p, { emit: M }) {
    const i = M, e = p, a = ref(), u = inject("mapRef"), d = (o) => {
      if (o != null) {
        if (o.imageSrc === void 0)
          throw new Error("이미지 경로가 존재하지 않습니다.");
      } else
        o = N;
      const s = new Image();
      s.src = o.imageSrc;
      const g = new kakao.maps.MarkerImage(
        o.imageSrc,
        new kakao.maps.Size(o.imageWidth ?? s.width, o.imageHeight ?? s.height),
        o.imageOption
      );
      a.value !== void 0 && a.value.setImage(g);
    }, y = (o) => {
      if (e.lat === void 0 || e.lng === void 0)
        throw new Error("marker의 위치가 없습니다.");
      const s = new kakao.maps.LatLng(e.lat, e.lng);
      a.value = new kakao.maps.Marker({
        position: s,
        title: e.title,
        draggable: e.draggable,
        clickable: e.clickable,
        zIndex: e.zIndex,
        opacity: e.opacity,
        altitude: e.altitude,
        range: e.range
      }), d(e.image), i("onLoadKakaoMapMarker", a.value), a.value.setMap(o), t(a.value), n(a.value), k(a.value), r(o, a.value);
    }, t = (o) => {
      kakao.maps.event.addListener(o, "click", () => {
        i("onClickKakaoMapMarker");
      });
    }, r = (o, s) => {
      kakao.maps.event.addListener(s, "dragend", function(g) {
        i("dragEndKakaoMapMarker", s);
      });
    }, n = (o) => {
      kakao.maps.event.addListener(o, "mouseover", () => {
        i("mouseOverKakaoMapMarker");
      });
    }, k = (o) => {
      kakao.maps.event.addListener(o, "mouseout", () => {
        i("mouseOutKakaoMapMarker");
      });
    }, l = (o) => `<div style="position:relative; bottom:${e.orderBottomMargin}">
        ${o}
      </div>`;
    return onBeforeUnmount(() => {
      var o;
      i("deleteKakaoMapMarker", a), (o = a.value) == null || o.setMap(null);
    }), watch(
      [() => m.value, () => u, () => u == null ? void 0 : u.value],
      ([o, s, g]) => {
        o && s !== void 0 && g !== void 0 && y(g);
      },
      { immediate: true }
    ), watch([() => e.lat, () => e.lng], ([o, s]) => {
      var g;
      m.value && ((g = a.value) == null || g.setPosition(new kakao.maps.LatLng(o, s)));
    }), watch([() => e.image], () => {
      d(e.image);
    }), watch(
      () => e.title,
      (o) => {
        var s;
        o !== void 0 && ((s = a.value) == null || s.setTitle(o));
      }
    ), watch(
      () => e.draggable,
      (o) => {
        var s;
        (s = a.value) == null || s.setDraggable(o !== void 0 && o);
      }
    ), watch(
      () => e.clickable,
      (o) => {
        var s;
        (s = a.value) == null || s.setDraggable(o !== void 0 && o);
      }
    ), watch(
      () => e.zIndex,
      (o) => {
        var s;
        o !== void 0 && isFinite(o) && ((s = a.value) == null || s.setZIndex(Number(o)));
      }
    ), watch(
      () => e.opacity,
      (o) => {
        var s, g;
        o !== void 0 && isFinite(o) ? (s = a.value) == null || s.setOpacity(Number(o)) : (g = a.value) == null || g.setOpacity(1);
      }
    ), (o, s) => {
      var g, K, A;
      return openBlock(), createElementBlock("div", null, [
        o.$slots.infoWindow ? (openBlock(), createBlock(unref(x), {
          key: 0,
          marker: a.value,
          lat: e.lat,
          lng: e.lng,
          visible: (g = e == null ? void 0 : e.infoWindow) == null ? void 0 : g.visible
        }, {
          default: withCtx(() => [
            renderSlot(o.$slots, "infoWindow")
          ]),
          _: 3
        }, 8, ["marker", "lat", "lng", "visible"])) : e.infoWindow ? (openBlock(), createBlock(unref(x), {
          key: 1,
          marker: a.value,
          lat: e.lat,
          lng: e.lng,
          content: (K = e == null ? void 0 : e.infoWindow) == null ? void 0 : K.content,
          visible: (A = e == null ? void 0 : e.infoWindow) == null ? void 0 : A.visible
        }, null, 8, ["marker", "lat", "lng", "content", "visible"])) : createCommentVNode("", true),
        e.order ? (openBlock(), createBlock(unref(z), {
          key: 2,
          lat: e.lat,
          lng: e.lng,
          "y-anchor": 0,
          content: l(e.order)
        }, null, 8, ["lat", "lng", "content"])) : createCommentVNode("", true)
      ]);
    };
  }
});
var G = { key: 0 };
var x = defineComponent({
  __name: "KakaoMapInfoWindow",
  props: {
    lat: {},
    lng: {},
    marker: {},
    content: {},
    disableAutoPan: { type: Boolean },
    removable: { type: Boolean, default: false },
    zIndex: {},
    altitude: {},
    range: { default: 500 },
    visible: { type: Boolean, default: true }
  },
  emits: ["onLoadKakaoMapInfoWindow"],
  setup(p, { emit: M }) {
    const i = M, e = p, a = ref(), u = ref(), d = inject("mapRef"), y = (t) => {
      var n, k;
      if (e.lat === void 0 || e.lng === void 0)
        throw new Error("infoWindow의 위치가 없습니다.");
      const r = new kakao.maps.LatLng(e.lat, e.lng);
      a.value = new kakao.maps.InfoWindow({
        position: r,
        content: u.value ?? e.content ?? "",
        removable: e.removable,
        disableAutoPan: e.disableAutoPan,
        zIndex: e.zIndex,
        altitude: e.altitude,
        range: e.range
      }), e.visible && (i("onLoadKakaoMapInfoWindow", a.value), e.marker !== void 0 ? (n = a == null ? void 0 : a.value) == null || n.open(t, e.marker) : (k = a == null ? void 0 : a.value) == null || k.open(t));
    };
    return onBeforeUnmount(() => {
      (a == null ? void 0 : a.value) !== null && a.value !== void 0 && a.value.close();
    }), watch(
      [() => m.value, () => d == null ? void 0 : d.value, () => m, () => d],
      ([t, r]) => {
        e.visible && t && r !== void 0 && r !== null && y(r);
      },
      { immediate: true }
    ), watch(
      () => e.marker,
      (t) => {
        var r, n, k;
        !e.visible || (d == null ? void 0 : d.value) === void 0 || (a.value != null && ((r = a.value) == null || r.close()), t !== void 0 ? (n = a == null ? void 0 : a.value) == null || n.open(d == null ? void 0 : d.value, t) : (k = a == null ? void 0 : a.value) == null || k.open(d == null ? void 0 : d.value));
      },
      {
        immediate: true
      }
    ), watch(
      [() => u == null ? void 0 : u.value, () => u],
      ([t]) => {
        var r;
        t !== void 0 && a.value !== void 0 && a.value !== null && ((r = a.value) == null || r.setContent(t));
      },
      { deep: true }
    ), watch([() => e.lat, () => e.lng], ([t, r]) => {
      var n;
      (n = a.value) == null || n.setPosition(new kakao.maps.LatLng(t, r));
    }), watch(
      () => e.content,
      (t) => {
        var r;
        (r = a.value) == null || r.setContent(t ?? "");
      }
    ), watch(
      () => e.zIndex,
      (t) => {
        var r;
        (r = a.value) == null || r.setZIndex(t ?? 0);
      }
    ), watch(
      () => e.altitude,
      (t) => {
        var r;
        (r = a.value) == null || r.setAltitude(t ?? 0);
      }
    ), watch(
      () => e.range,
      (t) => {
        var r;
        (r = a.value) == null || r.setRange(t ?? 500);
      }
    ), watch(
      () => e.visible,
      (t) => {
        t ? m != null && m.value && (d == null ? void 0 : d.value) !== void 0 && (d == null ? void 0 : d.value) !== null && y(d.value) : (a == null ? void 0 : a.value) !== null && a.value !== void 0 && a.value.close();
      }
    ), (t, r) => e.content && e.content.length > 0 || t.$slots.default ? (openBlock(), createElementBlock("div", G, [
      t.$slots.default ? (openBlock(), createElementBlock("div", {
        key: 0,
        ref_key: "contentSlot",
        ref: u
      }, [
        renderSlot(t.$slots, "default")
      ], 512)) : createCommentVNode("", true)
    ])) : createCommentVNode("", true);
  }
});
var H = { key: 0 };
var z = defineComponent({
  __name: "KakaoMapCustomOverlay",
  props: {
    lat: {},
    lng: {},
    content: {},
    xAnchor: { default: 0.5 },
    yAnchor: { default: 0.5 },
    zIndex: {},
    clickable: { type: Boolean, default: false },
    visible: { type: Boolean, default: true }
  },
  emits: ["onLoadKakaoMapCustomOverlay"],
  setup(p, { emit: M }) {
    const i = M, e = p, a = ref(), u = ref(), d = inject("mapRef"), y = (t) => {
      if (e.lat === void 0 || e.lng === void 0)
        throw new Error("KakaoMapCustomOverlay의 위치가 없습니다.");
      const r = new kakao.maps.LatLng(e.lat, e.lng);
      a.value = new kakao.maps.CustomOverlay({
        position: r,
        content: u.value ?? e.content ?? "",
        xAnchor: e.xAnchor,
        yAnchor: e.yAnchor,
        zIndex: e.zIndex,
        clickable: e.clickable
      }), e.visible && (a.value.setMap(t), i("onLoadKakaoMapCustomOverlay", a.value));
    };
    return onBeforeUnmount(() => {
      var t;
      a.value !== null && ((t = a.value) == null || t.setMap(null));
    }), watch(
      [() => m.value, () => d == null ? void 0 : d.value, () => m, () => d],
      ([t, r]) => {
        e.visible && t && r !== void 0 && r !== null && y(r);
      },
      { immediate: true }
    ), watch(
      [() => u == null ? void 0 : u.value, () => u],
      ([t]) => {
        var r;
        t !== void 0 && a.value !== void 0 && a.value !== null && ((r = a.value) == null || r.setContent(t));
      },
      { deep: true }
    ), watch([() => e.lat, () => e.lng], ([t, r]) => {
      var n;
      (n = a.value) == null || n.setPosition(new kakao.maps.LatLng(t, r));
    }), watch(
      () => e.content,
      (t) => {
        var r;
        (r = a.value) == null || r.setContent(t ?? "");
      }
    ), watch(
      () => e.zIndex,
      (t) => {
        var r;
        (r = a.value) == null || r.setZIndex(t ?? 0);
      }
    ), watch(
      () => e.visible,
      (t) => {
        var r;
        t ? m != null && m.value && (d == null ? void 0 : d.value) !== void 0 && (d == null ? void 0 : d.value) !== null && y(d.value) : (a == null ? void 0 : a.value) !== null && a.value !== void 0 && ((r = a.value) == null || r.setMap(null));
      }
    ), (t, r) => e.content && e.content.length > 0 || t.$slots.default ? (openBlock(), createElementBlock("div", H, [
      t.$slots.default ? (openBlock(), createElementBlock("div", {
        key: 0,
        ref_key: "contentSlot",
        ref: u
      }, [
        renderSlot(t.$slots, "default")
      ], 512)) : createCommentVNode("", true)
    ])) : createCommentVNode("", true);
  }
});
var W = defineComponent({
  __name: "KakaoMapPolyline",
  props: {
    latLngList: {},
    endArrow: { type: Boolean },
    strokeWeight: { default: 3 },
    strokeColor: { default: "#F10000" },
    strokeOpacity: { default: 0.6 },
    strokeStyle: { default: "solid" },
    zIndex: {}
  },
  emits: ["onLoadKakaoMapPolyline"],
  setup(p, { emit: M }) {
    const i = M, e = p, a = inject("mapRef"), u = ref(), d = computed(() => e.latLngList.map((t) => new kakao.maps.LatLng(t.lat, t.lng))), y = (t) => {
      u.value = new kakao.maps.Polyline({
        path: d.value,
        endArrow: e.endArrow,
        strokeWeight: e.strokeWeight,
        strokeColor: e.strokeColor,
        strokeOpacity: e.strokeOpacity,
        strokeStyle: e.strokeStyle,
        zIndex: e.zIndex
      }), u.value.setMap(t), i("onLoadKakaoMapPolyline", u.value);
    };
    return watch(
      [() => m.value, () => a == null ? void 0 : a.value, () => m, () => a],
      ([t, r]) => {
        t && r !== void 0 && r !== null && y(r);
      },
      { immediate: true }
    ), watch(
      () => e.latLngList,
      () => {
        var t;
        (t = u.value) == null || t.setPath(d.value);
      },
      { deep: true }
    ), watch(
      () => e.endArrow,
      () => {
        var t;
        (t = u.value) == null || t.setMap(null), a !== void 0 && y(a.value);
      }
    ), watch(
      [() => e.strokeWeight, () => e.strokeColor, () => e.strokeOpacity, () => e.strokeStyle],
      ([t, r, n, k]) => {
        var l;
        (l = u.value) == null || l.setOptions({
          strokeWeight: t,
          strokeColor: r,
          strokeOpacity: n,
          strokeStyle: k
        });
      }
    ), watch(
      () => e.zIndex,
      (t) => {
        var r;
        t !== void 0 && ((r = u.value) == null || r.setZIndex(t));
      }
    ), onBeforeUnmount(() => {
      var t;
      (t = u.value) == null || t.setMap(null);
    }), (t, r) => (openBlock(), createElementBlock("div", null, [
      renderSlot(t.$slots, "default")
    ]));
  }
});
var U = { key: 0 };
var V = { key: 1 };
var q = defineComponent({
  __name: "KakaoMapMarkerPolyline",
  props: {
    markerList: {},
    endArrow: { type: Boolean },
    strokeWeight: {},
    strokeColor: {},
    strokeOpacity: {},
    strokeStyle: {},
    zIndex: {},
    showMarkerOrder: { type: Boolean }
  },
  emits: [
    // Marker event
    "onLoadKakaoMapMarker",
    "onClickKakaoMapMarker",
    "dragEndKakaoMapMarker",
    "mouseOverKakaoMapMarker",
    "mouseOutKakaoMapMarker",
    "deleteKakaoMapMarker"
  ],
  setup(p, { emit: M }) {
    const i = M, e = p, a = inject("mapRef"), u = ref([]), d = (n) => {
      u.value.push(n), i("onLoadKakaoMapMarker", n);
    }, y = (n) => {
      const k = u.value.indexOf(n);
      u.value.splice(k, 1), i("deleteKakaoMapMarker", n);
    }, t = (n) => {
      const k = e.markerList, l = u.value.indexOf(n);
      k[l].lat = n.getPosition().getLat(), k[l].lng = n.getPosition().getLng(), i("dragEndKakaoMapMarker", n);
    }, r = (n, k) => `<div style="position:relative; bottom:${k}">
        ${n}
      </div>`;
    return (n, k) => (openBlock(), createElementBlock(Fragment, null, [
      e.markerList && unref(a) !== null ? (openBlock(), createElementBlock("div", U, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(e.markerList, (l, o) => (openBlock(), createBlock(unref(B), {
          id: o,
          key: l.key === void 0 ? o : l.key,
          map: unref(a),
          lat: l.lat,
          lng: l.lng,
          draggable: l.draggable,
          clickable: l.clickable,
          image: l.image,
          onOnLoadKakaoMapMarker: d,
          onDragEndKakaoMapMarker: t,
          onDeleteKakaoMapMarker: y,
          onOnClickKakaoMapMarker: (s) => i("onClickKakaoMapMarker", l),
          onMouseOverKakaoMapMarker: (s) => i("mouseOverKakaoMapMarker", l),
          onMouseOutKakaoMapMarker: (s) => i("mouseOutKakaoMapMarker", l)
        }, null, 8, ["id", "map", "lat", "lng", "draggable", "clickable", "image", "onOnClickKakaoMapMarker", "onMouseOverKakaoMapMarker", "onMouseOutKakaoMapMarker"]))), 128)),
        (openBlock(true), createElementBlock(Fragment, null, renderList(e.markerList, (l, o) => (openBlock(), createElementBlock("div", { key: o }, [
          o !== e.markerList.length - 1 ? (openBlock(), createBlock(unref(W), {
            key: 0,
            latLngList: [
              { lat: e.markerList[o].lat, lng: e.markerList[o].lng },
              { lat: e.markerList[o + 1].lat, lng: e.markerList[o + 1].lng }
            ],
            endArrow: e.endArrow,
            strokeWeight: e.strokeWeight,
            strokeColor: e.strokeColor,
            strokeOpacity: e.strokeOpacity,
            strokeStyle: e.strokeStyle,
            zIndex: e.zIndex
          }, null, 8, ["latLngList", "endArrow", "strokeWeight", "strokeColor", "strokeOpacity", "strokeStyle", "zIndex"])) : createCommentVNode("", true)
        ]))), 128))
      ])) : createCommentVNode("", true),
      e.markerList && e.showMarkerOrder ? (openBlock(), createElementBlock("div", V, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(e.markerList, (l, o) => (openBlock(), createBlock(unref(z), {
          key: o,
          lat: l.lat,
          lng: l.lng,
          "y-anchor": 0,
          content: r(l.order !== void 0 ? l.order : o, l.orderBottomMargin)
        }, null, 8, ["lat", "lng", "content"]))), 128))
      ])) : createCommentVNode("", true),
      renderSlot(n.$slots, "default")
    ], 64));
  }
});
var X = {
  install: (p) => {
    p.component("KakaoMap", T), p.component("KakaoMapMarker", B), p.component("KakaoMapCustomOverlay", z), p.component("KakaoMapInfoWindow", x), p.component("KakaoMapMarkerPolyline", q), p.component("KakaoMapPolyline", W);
  }
};
export {
  T as KakaoMap,
  z as KakaoMapCustomOverlay,
  x as KakaoMapInfoWindow,
  B as KakaoMapMarker,
  q as KakaoMapMarkerPolyline,
  W as KakaoMapPolyline,
  X as Vue3KakaoMaps,
  m as isKakaoMapApiLoaded,
  Q as useKakao
};
//# sourceMappingURL=vue3-kakao-maps_@utils.js.map
